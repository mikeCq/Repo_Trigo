<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="seleccionarLotes.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        /9j/4AAQSkZJRgABAQEASABIAAD/7gAOQWRvYmUAZAAAAAAB/+EFCEV4aWYAAE1NACoAAAAIAAwBAAAD
        AAAAAQAiAAABAQADAAAAAQAiAAABAgADAAAAAwAAAJ4BBgADAAAAAQACAAABEgADAAAAAQABAAABFQAD
        AAAAAQADAAABGgAFAAAAAQAAAKQBGwAFAAAAAQAAAKwBKAADAAAAAQACAAABMQACAAAAHgAAALQBMgAC
        AAAAFAAAANKHaQAEAAAAAQAAAOYAAAEeAAgACAAIAEgCTgABAAAASAJOAAEAAEFkb2JlIFBob3Rvc2hv
        cCBDUzYgKFdpbmRvd3MpADIwMTY6MDY6MjAgMTA6Mzg6MTUAAASQAAAHAAAABDAyMjGgAQADAAAAAf//
        AACgAgAEAAAAAQAAACKgAwAEAAAAAQAAACIAAAAAAAAABgEDAAMAAAABAAYAAAEaAAUAAAABAAABbAEb
        AAUAAAABAAABdAEoAAMAAAABAAIAAAIBAAQAAAABAAABfAICAAQAAAABAAADhAAAAAAAAABIAAAAAQAA
        AEgAAAAB/9j/7QAMQWRvYmVfQ00AAv/uAA5BZG9iZQBkgAAAAAH/2wCEAAwICAgJCAwJCQwRCwoLERUP
        DAwPFRgTExUTExgRDAwMDAwMEQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwBDQsLDQ4NEA4OEBQO
        Dg4UFA4ODg4UEQwMDAwMEREMDAwMDAwRDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDP/AABEIACIA
        IgMBIgACEQEDEQH/3QAEAAP/xAE/AAABBQEBAQEBAQAAAAAAAAADAAECBAUGBwgJCgsBAAEFAQEBAQEB
        AAAAAAAAAAEAAgMEBQYHCAkKCxAAAQQBAwIEAgUHBggFAwwzAQACEQMEIRIxBUFRYRMicYEyBhSRobFC
        IyQVUsFiMzRygtFDByWSU/Dh8WNzNRaisoMmRJNUZEXCo3Q2F9JV4mXys4TD03Xj80YnlKSFtJXE1OT0
        pbXF1eX1VmZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3EQACAgECBAQDBAUGBwcGBTUBAAIRAyExEgRBUWFx
        IhMFMoGRFKGxQiPBUtHwMyRi4XKCkkNTFWNzNPElBhaisoMHJjXC0kSTVKMXZEVVNnRl4vKzhMPTdePz
        RpSkhbSVxNTk9KW1xdXl9VZmdoaWprbG1ub2JzdHV2d3h5ent8f/2gAMAwEAAhEDEQA/APVCQBJ0A5K4
        rqf+NDpeF1xmBUz7RhMJZlZbDO13H6Bo/na6v8J+/wD4L/hO0exljHMeA5jgWuaeCDoQvI/r59Q39He/
        qfTGF/THmbKxqaCf+qx/3H/mfQekp9aovpyaWX472202tDq7GmWuaeHNKIvGPqP9eLugXDDzC63pVrvc
        3l1Lj/hav5H+lq/ts/SfznsdF9OTSzIoe22m1odXY0y1zTw5pSUkSSSSU//Q9VXBf4wPr3XgV29G6W5t
        mY8FmVdo5tTTo6pv5rr3fnf6H/jP5vu7GCxjqzIDwWkgwddNHBeT9V/xX9VHXm4+C71On5Li8Zdhk1N5
        e3I/ft/0f+n/AJH6RJTzX1d+ruf9Yc9uHhthoh197h7K2fvP/lf6Ov8Awi9w6J0bD6J06rp+Hu9KvUuc
        Zc5x+nY7+v8AyVHoXQsDoWAzBwWQ0a2WH6dj/wA62137y0UlKSSSSU//0fVUl8qpJKfqpJfKqSSn6qSX
        yqkkp//Z/9sAQwABAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAgICAgIC
        AgICAgIDAwMDAwMDAwMD/9sAQwEBAQEBAQEBAQEBAgIBAgIDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMD
        AwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMD/8AAEQgAIgAiAwERAAIRAQMRAf/EAB8AAAAGAgMBAAAAAAAA
        AAAAAAcIBgUECQMKAgEAC//EALUQAAIBAwQBAwMCAwMDAgYJdQECAwQRBRIGIQcTIgAIMRRBMiMVCVFC
        FmEkMxdScYEYYpElQ6Gx8CY0cgoZwdE1J+FTNoLxkqJEVHNFRjdHYyhVVlcassLS4vJkg3SThGWjs8PT
        4yk4ZvN1Kjk6SElKWFlaZ2hpanZ3eHl6hYaHiImKlJWWl5iZmqSlpqeoqaq0tba3uLm6xMXGx8jJytTV
        1tfY2drk5ebn6Onq9PX29/j5+v/EAB8BAAAGAwEBAQAAAAAAAAAAAAYFBAMHAggBCQAKC//EALURAAIB
        AwIEBAMFBAQEBgYFbQECAxEEIRIFMQYAIhNBUQcyYRRxCEKBI5EVUqFiFjMJsSTB0UNy8BfhgjQlklMY
        Y0TxorImNRlUNkVkJwpzg5NGdMLS4vJVZXVWN4SFo7PD0+PzKRqUpLTE1OT0laW1xdXl9ShHV2Y4doaW
        prbG1ub2Z3eHl6e3x9fn90hYaHiImKi4yNjo+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/dAAQA
        Bf/aAAwDAQACEQMRAD8A385poqeKSeeWOCCGN5ZppnWOKKKNS8kkkjlUjjjQEsxIAAuePfuvdav3yX/4
        U/fF7ov5wbY+Pe09tntb48bcydZtTv35D7Vr5sku3d1TTijWq6uwtAk0PYO0tj1i6czVxPryIab+FLUC
        mhbIe691st7G31s3s7Zu1+w+u9z4Teuxd64PHbk2nuzbWRpstgdw4HL00dZjctisjSSSU9XRVdNIGV1b
        82PIt7917pV+/de697917r//0N+bM4jF7gxOUwOboKXK4XNY6txGXxddClRRZLF5Kmlo8hQVlPIrRz0l
        bSTPHIjDSysQffuvdfOp/nu/yIsz8Kc1n/lb8U8Dks98Rc/k/ut47OpRV5TM/HDMZWqCJS1MjtPW5PqP
        JVtSseNyUrPLipXWirma9NU1XuvdAp/JC/ne7z/lz7youke7a3N71+F+9c20uUxUS1OXz/ROey1Rqrew
        Ov6JfLUVe2qupkM2fwEI/wAp9ddRL995oMh7r3X0p9i762b2dsza/YnXm6MHvXYu9cHjty7T3btrI02W
        wO4cFlqZKzG5XE5GjeSnrKKrppQysrf4HkEe/de6Vd/9b+n1/P8AT6e/de6//9Hf3/3v/X/rx/vPv3Xu
        tSj+f9/PZwHx8we+/g18TsvhN0977lxGT2h3r2IKfHbg230zgMzRy4/N7BxlLWRVuIzfaeYx9TJBXiZJ
        afb0ErRurZJ9NB7r3WnJ/Lu/l3d9/wAybvvG9LdLYz+H4fH/AGWX7V7Vy9FUz7M6m2ZPUtFLns9LC0H8
        QzFeYJYsPiIpY6rLVUbKrQ08VVVU3uvdfVA+Enwz6f8AgR8dNkfGvpKHONtDaKVNdXZjcuWqsvnt1bsy
        5iqNzbtyrzSfZUFZuDIoZ2pKCKlx9Nq0QQxoLe/de6Nn7917r//S34s9h6XcOEzG362Wvp6POYrI4erq
        MXX1eKycFNk6Oainmx2UoZIa3G18cU7NDUQuk0MgDowYAj3Xuvnu/KT/AITA/Kui+dmB60+P2WqN4/Fz
        uHOZTdUHyF3tVpkK3pjb4q2rty4XtyBaijyO5t7Y1KjRiZKMKm6ZJYnZqJvvvsvde63c/gz8GehP5fPQ
        e3egegdu/wAPw+P0ZPd27smlNPvPszec9NDBld773y0EEH8QzGQ8KpFEix0lBSJHS0sUVPFHGvuvdHF9
        +691737r3X//09/g/Q/8T9P9j7917rj+R9Pr+P8AkL6+/de65e/de697917r3v3Xuv/Z
</value>
  </data>
</root>